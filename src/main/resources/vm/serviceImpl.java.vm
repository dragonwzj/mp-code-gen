package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} mapper;

    @Override
    public boolean add(${entity} entity){
        return super.save(entity);
    }

    @Override
    public ${entity} selectById(int id){
        return super.getById(id);
    }

    @Override
    public ${entity} modifyById(${entity} entity){
        if(updateById(entity)){
            return super.getById(entity.getId());
        }else {
            return null;
        }
    }

    @Override
    public IPage<${entity}> selectByPage(${entity} entity, PageDomain pageDomain){

        QueryWrapper<${entity}> queryWrapper = new QueryWrapper<>();
        queryWrapper.lambda()
## 字段中的ID，createdBy，createdTime，updatedBy，updatedTime，delFlag不作为查询条件
#foreach($field in ${table.fields})
#if(${field.capitalName.toUpperCase()} != "ID" && ${field.capitalName.toUpperCase()} != "DELFLAG" &&
${field.capitalName.toUpperCase()} != "CREATEDBY" && ${field.capitalName.toUpperCase()} != "CREATEDTIME" &&
${field.capitalName.toUpperCase()} != "UPDATEDTIME" && ${field.capitalName.toUpperCase()} != "UPDATEDBY")
                // ${field.comment}
                .eq(entity.get${field.capitalName}() != null, ${entity}::get${field.capitalName}, entity.get${field.capitalName}())
#end
#end
        ;

        return super.page(new Page<${entity}>(pageDomain.getPageNum(), pageDomain.getPageSize()), queryWrapper);
    }

    @Override
    public boolean deleteById(int id){
        return super.removeById(id);
    }

}
#end
